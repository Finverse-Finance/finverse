# Project Requirements Document (PRD)

## 1. Introduction

This PRD defines a personal finance web application built for the 2024-25 FBLA Coding & Programming competitive event. The goal is to create a standalone application to help students manage their finances by tracking account balances, income, and expenses. The project is engineered to excel in functionality, usability, code quality, and presentation—meeting every criterion defined in the competition rubric.

The Project is already setup with Next.js, MongoDB, plaid sandbox, and clerk authentication. You need to implement the actual features of this app.

---

## 2. App Overview

The application is a modern personal finance manager featuring:

- **Transaction Tracking:** Users can create, update, delete, search, and filter transactions. Each transaction includes details such as date, amount, category, and notes.

- **Account Management:** Supports manual account entry as well as Plaid-linked bank accounts. Manual transactions can be edited even when auto-imported via Plaid.

- **Dashboard Overview:** The main dashboard displays the user's total balance, interactive charts of income and expenses, and the five most recent transactions. A hyperlink directs users to the full Transactions page.

- **Daily Financial Reports:** AI-assisted daily summaries generated by the Gemini API, with options to search and view historical reports.

- **Interactive Q/A Assistant:** A dedicated chat page where users can ask finance-related questions and receive context-aware, data-driven answers.

- **Multi-Currency Support:** Users can toggle among USD, EUR, GBP, and CAD using fixed conversion rates.

- **Responsive UI:** A dark-mode design with a top navbar on the public homepage ("/") and a persistent sidebar on all authenticated pages.

---

## 3. User Flows

### Authentication & Onboarding

- **Homepage ("/"):**

The public landing page uses a top navigation bar for “Log In” or “Sign Up.” Users authenticate via Clerk using Google or email. Secure authentication is managed entirely by Clerk, with no local password storage.

- **Onboarding ("/onboarding"):**

Immediately after authentication, users are directed to the onboarding screen where they choose one of two options:

- Link bank accounts via Plaid (auto-import transactions)

- Proceed with manual transaction entry

The user’s decision, along with their Clerk user ID and onboarding status, is stored in MongoDB.

### Core Navigation After Onboarding

All authenticated pages (except the public homepage) have a fixed sidebar for easy navigation:

- **Dashboard ("/dashboard"):**

    - Displays a financial overview including total balance, monthly income/expense summaries, interactive charts, and a list of the 5 most recent transactions.

    - A “View All” hyperlink directs users to the full Transactions page.

    - Toast notifications (via Shadcn) alert users if they exceed certain spending thresholds or if their balance drops below $50 (or equivalent).

- **Transactions ("/transactions"):**

    - Shows a detailed list of all transactions (both manual and Plaid-imported), with data columns for date, amount, category, notes, and source.

    - Supports inline editing, deletion, and an “Add Transaction” form for manual entries.

    - Includes comprehensive search and filtering options (by date range, category, amount, and keywords).

- **Daily Reports ("/daily-reports"):**

    - Presents AI-generated daily summaries powered by the Gemini API.

    - Displays the latest report at the top along with a chronological, searchable list of past daily summaries.

    - Detailed view access for each report, highlighting spending trends and key insights.

- **Q/A Assistant ("/assistant"):**

    - A full-screen chat interface that uses contextual data from the user's entire financial history.

    - Users can ask questions (e.g., “What did I spend on dining last month?”) and receive precise, data-driven answers.

    - Integrated search capabilities allow users to retrieve specific details from their transactions, reports, or account history.

- **Wallet ("/wallet") & Settings ("/settings"):**

    - The Wallet page allows management of financial accounts (manual account creation, editing, and deletion; Plaid-linked accounts are shown as live read-only).

    - The Settings page lets users select their preferred currency and toggle notification preferences. Fixed conversion rates are applied:

        - 1 USD = 0.89 EUR

        - 1 USD = 1.40 CAD

        - 1 USD = 0.77 GBP

### Navigation Summary

- The **public homepage ("/")** features a top navbar for public access.

- All authenticated pages (Dashboard, Transactions, Daily Reports, Q/A Assistant, Wallet, Settings) use a sidebar for easy switching between features.

- A consistent, validated data flow (via MongoDB) ensures updates are real time across the app.

---

## 4. Tech Stack & APIs

### Core Framework and Libraries

- **Next.js 15 (App Router):**

[Next.js Documentation](https://nextjs.org/docs)

- **React & TypeScript:**

[React Documentation](https://reactjs.org/docs/getting-started.html) | [TypeScript Documentation](https://www.typescriptlang.org/docs)

- **Tailwind CSS:**

[Tailwind CSS Documentation](https://tailwindcss.com/docs)

- **Shadcn UI Components:**

[Shadcn UI Documentation](https://ui.shadcn.com/docs)

- **Lucide Icons:**

[Lucide Documentation](https://lucide.dev)

### Backend and Data Management

- **MongoDB Atlas:**

[MongoDB Atlas Documentation](https://www.mongodb.com/docs/atlas)

- **Clerk Authentication:**

[Clerk Documentation](https://clerk.com/docs)

- **Plaid (Bank Integration):**

[Plaid API Documentation](https://plaid.com/docs/)

- **Gemini API (AI Reports & Q/A Assistant):**

[Gemini API Documentation](https://gemini.com/) _(or internal documentation as provided)_

### Data Visualization and Validation

- **Recharts:**

[Recharts Documentation](https://recharts.org/en-US/api)

- **Zod (Validation):**

[Zod Documentation](https://zod.dev)

### Additional Tools

- **T3 Stack:**

[T3 Stack Documentation](https://create.t3.gg/en/introduction)

- **GitHub & Vercel:**

[GitHub Documentation](https://docs.github.com/en) | [Vercel Documentation](https://vercel.com/docs)

---

## 5. Core Features

### Financial Tracking and Transaction Management

- **CRUD Operations:**

Users can create, update, delete, and search transactions (input fields include date, amount, category, and notes).

- **Account Management:**

Manage multiple financial accounts. Manual accounts are fully editable; Plaid-linked accounts auto-sync from the bank but remain editable in terms of transaction adjustments.

- **Real-Time Data:**

All changes are instantly reflected in MongoDB and across the app’s views.

### Dashboard and Reporting

- **Dashboard Overview:**

Provides total balance, interactive income/expense charts, and the latest 5 transactions (with a “View All” link to Transactions).

- **Daily Reports:**

AI-generated daily summaries with search and detailed view options that identify spending trends and patterns.

- **Interactive Visualizations:**

Charts built with Recharts to compare income, expenses, and balance trends over various periods.

### Interactive Q/A Assistant

- **Chat Interface:**

Powered by the Gemini API, it provides context-aware responses based on comprehensive financial data.

- **Search Capabilities:**

Quickly retrieve specific transactions or insights by querying the assistant.

### Additional Functionalities

- **Multi-Currency Support:**

Users can toggle among USD, EUR, GBP, and CAD with predetermined conversion rates.

- **Notification System:**

Toast notifications (via Shadcn) alert users to spending anomalies such as overspending or low balance.

- **Responsive Design:**

The UI is optimized for dark mode and includes a top navbar on the homepage, with sidebar navigation on all authenticated pages.

---

## 6. In-Scope vs. Out-of-Scope Items

### In-Scope Items

- **User Authentication & Onboarding:**

Secure login and onboarding with options for Plaid integration or manual entry.

- **Financial Transaction Management:**

Complete CRUD operations, advanced filtering, and real-time updates.

- **Dashboards and Reporting:**

Interactive financial overviews and AI-generated daily summaries.

- **Interactive Assistant:**

An AI-powered chat interface with robust Q&A and search functionalities.

- **Account and Wallet Management:**

Full management of multiple financial accounts.

- **Multi-Currency Toggle:**

Currency conversion with fixed rates.

- **Responsive UI/UX:**

Dark-mode design, intuitive navigation via sidebar and navbar where applicable.

### Out-of-Scope Items

- **Third-Party Payment Integrations:**

Integration with systems like Stripe is not included.

- **Offline Functionality:**

The app does not support offline operations.

- **Non-Financial Features:**

Social networking or additional non-finance related features are out of scope.

- **Elaborate UI Animations:**

Only basic animations for feedback are provided—extensive animation is excluded.

---

## 7. Rubric and Competition Guidelines

This section aligns the project with the competition rubric and required guidelines from the FBLA Coding & Programming event.

### Rubric Categories and Expectations

- **Code Quality (0-10 points):**

    - **Expectations:** Clean, modular code with logical naming conventions, complete comments, and proper formatting.

    - **Focus:** Ensure every component (from transactions CRUD to API integrations) is well-documented and maintainable.

- **User Experience (0-10 points):**

    - **Expectations:** An intuitive interface with clear instructions and easy navigation between pages.

    - **Focus:** Provide a consistent UI (navbar on the homepage, sidebar on all other pages) and comprehensive help options including an interactive Q&A assistant.

- **Functionality (0-10 points):**

    - **Expectations:** The program must comprehensively address the prompt—tracking finances, generating summaries and reports, and enabling search/filtering and CRUD operations.

    - **Focus:** Every financial entry, report, and AI-generated insight should be fully functional and error-free.

- **Data Storage (0-5 points):**

    - **Expectations:** Use MongoDB effectively to store user data, transactions, and reports. Variables must be well defined, and data must update in real time.

    - **Focus:** Ensure secure and efficient data storage tied to the Clerk user ID.

---

## 8. Conclusion

This PRD provides a comprehensive blueprint for building a personal finance management application that is competition-ready. By covering the app overview, detailed user flows, a complete tech stack with API integrations, core features, in-scope vs. out-of-scope items, and explicit rubric guidelines, this document serves as a solid foundation for both development and presentation.
